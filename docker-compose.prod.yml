version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6-jammy
    container_name: shopphere-mongodb-prod
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: shopphere
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - shopphere-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: shopphere-redis-prod
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - shopphere-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: shopphere-backend-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/shopphere?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
    depends_on:
      - mongodb
      - redis
    networks:
      - shopphere-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: shopphere-frontend-prod
    restart: always
    ports:
      - "80:3000"
      - "443:3000"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
      REACT_APP_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      - backend
    networks:
      - shopphere-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer (optional for scaling)
  nginx:
    image: nginx:alpine
    container_name: shopphere-nginx-prod
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - shopphere-prod-network
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  shopphere-prod-network:
    driver: bridge
